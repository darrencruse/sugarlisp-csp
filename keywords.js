// Generated by SugarLisp v0.6.0
var sl = require('sugarlisp-core/sl-types');
var match = require('sugarlisp-match/pattern-match');
exports["go"] = function() {
  var args = Array.prototype.slice.call(arguments);
  return match(args, function(when) {
    when([
        function(sym) {
          return sym.value === "go";
        },
        match.var("fname", match.slsymbol)
      ],
      function(vars) {
        return (function(fname) {
          return sl.transpiled([
            "csp.go(", fname, ");"
          ]);
        }).call(this, vars["fname"]);
      }, this);
    when([
        function(sym) {
          return sym.value === "go";
        },
        match.var("goargs", match.sllist)
      ],
      function(vars) {
        return (function(goargs) {
          return match(goargs, function(when) {
            when([
                function(sym) {
                  return sym.value === "begin";
                }
              ],
              function(vars) {
                return (function(body) {
                  return sl.transpiled([
                    "csp.go(function* () {\n",
                    "  ", this.transpileExpressions(body), "\n",
                    "})"
                  ]);
                }).call(this, vars["_rest"]);
              }, this);
            when([
                match.var("fncall", match.slsymbol)
              ],
              function(vars) {
                return (function(fncall, fnargs) {
                  return sl.transpiled([
                    "csp.go(", fncall, ",[", fnargs.join(','), "]);"
                  ]);
                }).call(this, vars["fncall"], vars["_rest"]);
              }, this);
            when([
                match.var("any", match.sldefault)
              ],
              function(vars) {
                return (function(any) {
                  return this.error('go expects a body wrapped in {} or a generator function call');
                }).call(this, vars["any"]);
              }, this);
          }, this);
        }).call(this, vars["goargs"]);
      }, this);
    when([
        match.var("any", match.sldefault)
      ],
      function(vars) {
        return (function(any) {
          return this.error('go expects a body wrapped in {} or a named generator function');
        }).call(this, vars["any"]);
      }, this);
  }, this)
};