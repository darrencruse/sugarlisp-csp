// http://talks.golang.org/2012/concurrency.slide#50
// Reduce tail latency using replicated search servers.
#use "csp"

function fakeSearch(kind) {
  return function*(query) {
    <~ timeout(Math.random() * 200);
    return "${kind} result for query ${query}";
  };
}

var web1 = fakeSearch("web1");
var web2 = fakeSearch("web2");
var image1 = fakeSearch("image1");
var image2 = fakeSearch("image2");
var video1 = fakeSearch("video1");
var video2 = fakeSearch("video2");

// renamed from "first" because that conflicts with lispy "first"
function* firstSearchResult(query, replicas) {
  var ch = chan();
  function* searchReplica(i) {
    var replicaFn = replicas[i];
    //yield put(ch, (yield* replicaFn(query)));
    (yield* replicaFn(query)) ~> ch;
  }
  for (var i = 0; i < replicas.length; i++) {
    go(searchReplica(i));
  }
  return (<~ ch);
}

function* google(query) {
  var ch = chan();

  go {
    (yield* firstSearchResult(query, [web1, web2])) ~> ch;
  };
  go {
    (yield* firstSearchResult(query, [image1, image2])) ~> ch;
  };
  go {
    (yield* firstSearchResult(query, [video1, video2])) ~> ch;
  };

  var t = timeout(80);

  var results = [];
  for (var i = 0; i < 3; ++i) {
    var r = <~alts([ch, t]);
    if (r.channel === ch) {
      results.push(r.value);
    } else {
      console.log("timed out");
      break;
    }
  }

  return results;
}

go {
  var start = new Date();
  var results = yield* google("PLT");
  var elapsed = (new Date()) - start;
  console.log(results.join("\n"));
  console.log(elapsed);
};
